# -*- coding: utf-8 -*-
"""DATAFRAMESpractice.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CqOEiCsQfMzEpV__uDNMMZT4Smp2k6xJ

# DATA FRAMES **PRACTICE**

**DATA FRAMES** :

creating a data frame from a dictionary
"""

import pandas as pd
import numpy as np

mydata={'population':[20000,30000,15000,50000],'area':[200,300,150,500],'income':[20,30,15,50]}
df=pd.DataFrame(mydata)
print(df)

"""using head method:"""

print(df.head(2))

"""arranging columns in aspecific order"""

pd.DataFrame(mydata,columns=['area','income','population'])

"""adding indexes"""

df2=pd.DataFrame(mydata,index=['pune','vizag','goa','hyd'])
print(df2)

"""retrieving columns:it can be retrieved as a series"""

df2['population']

df2.area

"""retrieveing rows using 'loc'&'iloc'"""

df2.loc['vizag']

df2.iloc[2]

"""assigning columns:"""

df2['literacy']=[87,98,67,99]
print(df2)

df2['col']=np.arange(4)
print(df2)

"""assigning a series to data frame"""

ser1=pd.Series([2,3,5],index=['pune','vizag','hyd'])
df2['col']=ser1
print(df2)

ser2=pd.Series([34,56,89],index=['vizag','pune','goa'])
df2['literacy']=ser2
print(df2)

"""creating a boolean column:"""

df2['eligible']=df2.income>20
print(df2)

df2['eligible']=df2.population>=20000
print(df2)

"""deleting a column using 'del' keword:"""

del df2['eligible']
print(df2)

"""retrieving name of columns present in the df2"""

df2.columns

"""creating a data frame with nested dict of dicts:"""

mydata2={'vizag':{'pop':30,'area':3,'income':300},'pune':{'pop':10,'area':1,'income':100},'goa':{'pop':40,'area':4,'income':400},'hyd':{'pop':20,'area':2,'income':200}}
df3=pd.DataFrame(mydata2)
print(df3)

"""transposing rows and columns:"""

df4=df3.T
print(df4)

"""dict of series"""

mydata3={'pop':df4['pop'][1:3],'area':df4['area'][:-2]}
pd.DataFrame(mydata3)

"""naming to index and columns"""

df4.index.name='cities'
df4.columns.name='details'
print(df4)

"""getting all values of data frame as an array"""

print("values of df",df.values)
print("values of df2",df2.values)
print("values of df3",df3.values)
print("values of df4",df4.values)