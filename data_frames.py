# -*- coding: utf-8 -*-
"""data frames.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CqOEiCsQfMzEpV__uDNMMZT4Smp2k6xJ

**DATA FRAMES** :

creating a data frame from a dictionary
"""

import pandas as pd
import numpy as np

mydata={'population':[20000,30000,15000,50000],'area':[200,300,150,500],'income':[20,30,15,50]}
df=pd.DataFrame(mydata)
print(df)

"""using head method:"""

print(df.head(2))

"""arranging columns in aspecific order"""

pd.DataFrame(mydata,columns=['area','income','population'])

"""adding indexes"""

df2=pd.DataFrame(mydata,index=['pune','vizag','goa','hyd'])
print(df2)

"""retrieving columns:it can be retrieved as a series"""

df2['population']

df2.area

"""retrieveing rows using 'loc'&'iloc'"""

df2.loc['vizag']

df2.iloc[2]

"""assigning columns:"""

df2['literacy']=[87,98,67,99]
print(df2)

df2['col']=np.arange(4)
print(df2)

"""assigning a series to data frame"""

ser1=pd.Series([2,3,5],index=['pune','vizag','hyd'])
df2['col']=ser1
print(df2)

ser2=pd.Series([34,56,89],index=['vizag','pune','goa'])
df2['literacy']=ser2
print(df2)

"""creating a boolean column:"""

df2['eligible']=df2.income>20
print(df2)

df2['eligible']=df2.population>=20000
print(df2)

"""deleting a column using 'del' keword:"""

del df2['eligible']
print(df2)

"""retrieving name of columns present in the df2"""

df2.columns

"""creating a data frame with nested dict of dicts:"""

mydata2={'vizag':{'pop':30,'area':3,'income':300},'pune':{'pop':10,'area':1,'income':100},'goa':{'pop':40,'area':4,'income':400},'hyd':{'pop':20,'area':2,'income':200}}
df3=pd.DataFrame(mydata2)
print(df3)

"""transposing rows and columns:"""

df4=df3.T
print(df4)

"""dict of series"""

mydata3={'pop':df4['pop'][1:3],'area':df4['area'][:-2]}
pd.DataFrame(mydata3)

"""naming to index and columns"""

df4.index.name='cities'
df4.columns.name='details'
print(df4)

"""getting all values of data frame as an array"""

print("values of df",df.values)
print("values of df2",df2.values)
print("values of df3",df3.values)
print("values of df4",df4.values)

"""INDEX OBJECTS:"""

obj=pd.Series(range(5),index=['q','w','e','r','t'])
print(obj)
print(obj.index)
print(obj.values)

ind=obj.index
ind

ind[1:4]

"""index objects are immutable and cannot be modified by the user"""

ind[0]='x'

ind2=pd.Index(np.arange(4))
obj2=pd.Series(range(4),index=ind2)
obj2

ind2

"""pandas index can contain duplicate lables"""

ind_dup=pd.Index(['a','a','b','c'])
pd.Series(range(4),index=ind_dup)

"""ESSENTIAL FUNCTIONALITY:

REINDEXING:

creating new object with old data and new indexes:
"""

obj

obj3=obj.reindex(['a','b','c','d','e'])
obj3

obj4=pd.Series(['me','you','him'],index=[2,4,6])
obj4

"""using methods 'ffill','bfill'"""

obj4.reindex(range(10),method='ffill')

obj4.reindex(range(10),method='bfill')

"""reindexing for data frames:"""

df= pd.DataFrame(np.arange(12).reshape((4, 3)),index=['a','b', 'c', 'd'],columns=['hyd', 'goa', 'vizag'])
df

"""reindexing rows:"""

df2=df.reindex(['a','b','c','d','e'])
df2

"""reindex columns: using columns key word"""

df3=df.reindex(columns=['goa','pune','vizag','hyd'])
df3

"""using 'loc':"""

df3.loc[['c','a','b','d'],['vizag','goa','pune','hyd']]

"""DROPING ENTRIES FROM AN AXIS:"""

drp=pd.Series(np.arange(5.),index=['a','s','d','f','g'])
drp

"""using 'drop()' method"""

drp2=drp.drop('s')
drp2

"""droping multiple values"""

drp.drop(['a','d'])

"""dropping from a data frame:"""

dataframe=pd.DataFrame(np.arange(12).reshape(3,4),index=[0,1,2],columns=[0,1,2,3])
dataframe

"""droppingn rows:"""

dataframe.drop(1)

dataframe.drop(0)

"""dropping columns:

by passing axis=1 or axis='columns'
"""

dataframe.drop(0,axis=1)

dataframe.drop([1,3],axis='columns')

"""actually this 'drop' method will create a new object by droping specified rows or columns from given object,but by using 'inplace' it will manipulate given object with out creating new object :

with out using 'inplace':
"""

dataframe1=pd.DataFrame(np.arange(9).reshape(3,3),index=[0,1,2],columns=[0,1,2])
dataframe1

dataframe1.drop(0)

dataframe1

"""using 'inplace'"""

dataframe1.drop(0,inplace=True)

dataframe1

"""INDEXING,SELECTION,AND FILTERING:"""